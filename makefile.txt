# Thanks to Job Vranish (https://spin.atomicobject.com/2016/08/26/makefile-c-projects/)
TARGET_EXEC := run

BUILD_DIR := ./out
SRC_DIRS := ./src

# Find all the C and C++ files we want to compile
SRCS := $(shell find $(SRC_DIRS) -name *.cpp -or -name *.c)

# String substitution for every C/C++ file.
# As an example, hello.cpp turns into ./build/hello.cpp.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/hello.cpp.o turns into ./build/hello.cpp.d
DEPS := $(OBJS:.o=.d)

# Every folder in ./src will need to be passed to GCC so that it can find header files
INC_DIRS := $(shell find $(SRC_DIRS) -type d)
# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
CPPFLAGS := $(INC_FLAGS) -MMD -MP

# The final build step.
$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CC) $(OBJS) -o $@ $(LDFLAGS)

# Build step for C source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# Build step for C++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	mkdir -p $(dir $@)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@

depend: $(SRCS)
	makedepend $(INCLUDES) $^

.PHONY: clean
clean:
	rm -r $(BUILD_DIR)

# Include the .d makefiles. The - at the front suppresses the errors of missing
# Makefiles. Initially, all the .d files will be missing, and we don't want those
# errors to show up.
-include $(DEPS)






CC = g++
CFLAGS = -g -Wall -std=c++11 $(pkg-config --libs glfw3) -lglfw -lGL -lm -lX11 -lpthread -ldl -lGLU -lGLEW -DGLEW_STATIC #-lXrandr -lXi
INCLUDES = -I ./include
SRCS := $(shell find ./src/ -name *.cpp)
OUT = ./out
MAIN = Main

#_OBJS = $(SRCS:.cpp=%$(OUT)/.o)
$(SRCS:%=$(OUT)/%.o)

all: $(MAIN) run

test: $(MAIN) clean
	valgrind --log-file="$(OUT)/valgrind_output.txt" --tool=cachegrind ./$(MAIN)

$(MAIN): $(OBJS)
	@echo Linking...
#	env PKG_CONFIG_PATH=./glfw/src $(CC) $(pkg-config --cflags glfw3) $(CFLAGS) $(pkg-config --libs glfw3) $(INCLUDES) -o $(MAIN) $(OBJS)
	$(CC) $(CFLAGS) $(INCLUDES) -o $(OUT)/$(MAIN) $(OBJS)

$(OBJS): $(SRCS)
	

.cpp.o:
	@echo Compiling...
#	env PKG_CONFIG_PATH=./glfw/src $(CC) $(pkg-config --cflags glfw3) $(CFLAGS) $(pkg-config --libs glfw3) $(INCLUDES) -c $< -o $@
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $(OUT)/$(notdir $@)
#-o $(OUT)/$<



run:
	$(OUT)/$(MAIN)

clean:
	rm $(wildcard $(OUT)/*)

depend: $(SRCS)
	makedepend $(INCLUDES) $^



